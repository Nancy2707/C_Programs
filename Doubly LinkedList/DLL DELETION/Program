class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
    
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        new_node.prev = last
    
    def delete_node(self, key):
        if self.head is None:
            print("List is empty")
            return
        
        current = self.head
        
        # Case 1: The node to be deleted is the head node
        if current and current.data == key:
            self.head = current.next
            if self.head:
                self.head.prev = None
            current = None
            return
        
        # Case 2: The node to be deleted is in the middle or at the end
        while current and current.data != key:
            current = current.next
        
        if current is None:
            print("Node with data", key, "not found")
            return
        
        if current.next:
            current.next.prev = current.prev
        
        if current.prev:
            current.prev.next = current.next
        
        current = None
    
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

# Usage
dll = DoublyLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.append(4)

print("Initial list:")
dll.print_list()

# Get input from user
key = int(input("Enter the value to delete: "))
dll.delete_node(key)

print("List after deletion:")
dll.print_list()
